generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String    @id @default(uuid())
  first_name       String
  last_name   String
  email   String @unique
  username   String @unique
  password   String
  login_attempts Int       @default(0) @map("login_attempts")
  isBlocked Boolean   @default(false) @map("is_blocked")
  enterpriseId   Int?      @map("enterprise_id") 
  role String @default("")  
  active Boolean @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  lastLogin      DateTime? @map("last_login")   

  permission Permission[]
  permissionUser UserPermission[]
  company Company[]
  companyUser UserCompany[]
  items Items[]
  category Category[]
  address Address[]
  stockType StockType[]  
  stock Stock[]

  createdInvoices   Invoice[] @relation(name: "CreatedBy")
  cancelledInvoices Invoice[] @relation(name: "CancelledBy")
  updateInvoices Invoice[] @relation(name: "UpdateBy")
  
  @@map("users")
}

model Permission {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?  
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  user User @relation(fields: [create_id], references: [id])
  create_id String

  users UserPermission[]

  @@map("permission")
}

model UserPermission {
  
  user_id      String      @map("user_id")
  permission_id Int      @map("permission_id")
  assigned_at  DateTime @default(now()) @map("assigned_at")

  user       User       @relation(fields: [user_id], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permission_id], references: [id], onDelete: Cascade)

  @@id([user_id, permission_id])
  @@map("user_permissions")
}

model Company {
  id           Int     @id @default(autoincrement())
  name         String  @db.VarChar(100)
  cnpj         String  @unique @db.VarChar(14)   
  isBlocked    Boolean @default(false)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  user User @relation(fields: [create_id], references: [id])
  create_id String

  users UserCompany[]
  items Items[]
  category Category[]
  address Address[]
  stockType StockType[]
  invoice Invoice[]
  stock Stock[]

  @@map("company")
}

model UserCompany {
  companyId  Int      @map("company_id")
  userId     String   @map("user_id")
  assignedAt DateTime @default(now()) @map("assigned_at")

  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  

  @@id([companyId, userId])
  @@map("company_users")
}

model Items {
  id          Int      @id @default(autoincrement())
  code        String   @unique
  description String
  companyId   Int
  categoryId Int  
  createId String
  weight      Decimal?
  isBlocked   Boolean  @default(false)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  company     Company? @relation(fields: [companyId], references: [id])
  user User @relation(fields: [createId], references: [id])  
  category     Category? @relation(fields: [categoryId], references: [id])
  
  Stock     Stock[] 

  @@index([code])
  @@map("items")
}

model Category {
  id         Int      @id @default(autoincrement())
  companyId Int
  createId String
  name       String   @db.VarChar(100)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
 
  user User @relation(fields: [createId], references: [id]) 
  company    Company @relation(fields: [companyId], references: [id])


  items Items[]
  
  
  @@index([name])
  @@map("category")
  
}


model Address {
  id         Int      @id @default(autoincrement()) 
  name       String   @db.VarChar(50)
  isBlocked  Boolean  @default(false) 
  status     String    @default("available")
  capacity   Decimal
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  user User @relation(fields: [createId], references: [id])
  createId String

  company    Company @relation(fields: [companyId], references: [id])
  companyId Int
  
  
  stock Stock[]

  @@unique([name])
  @@index([name])
  @@map("addresses")
}

model StockType {
  id        Int      @id @default(autoincrement())
  name      String
  companyId Int
  createId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  company   Company  @relation(fields: [companyId], references: [id])
  user      User     @relation(fields: [createId], references: [id])

  stock Stock[]

  @@unique([name])
  @@index([name])
  @@map("stock_types")
}
model Invoice {
  id            Int            @id @default(autoincrement())
  number        String         
  series        String
  divergence    Boolean  @default(false)
  issue_date    DateTime
  entry_date    DateTime
  totalNf_value Float
  divergenceReason String?
  status String?
  isInvoiceCancelled Boolean  @default(false)
  cancellationReason String?
  createId    String
  userCancelledId String?
  userUpdateId String?
  companyId    Int
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt 


  company   Company  @relation(fields: [companyId], references: [id])
  user            User    @relation(name: "CreatedBy", fields: [createId], references: [id])
  userCancelled   User?   @relation(name: "CancelledBy", fields: [userCancelledId], references: [id])
  userUpdate   User?   @relation(name: "UpdateBy", fields: [userUpdateId], references: [id])
  
  Stock     Stock[] 
  
  @@index([number])
  @@map("invoices") 
}

model Stock {
  id                Int      @id @default(autoincrement())
  invoiceId        Int
  itemId           Int
  stockTypeId      Int?
  addressId        Int?
  companyId         Int
  lastUpdatedBy    String
  reservedQuantity  Int
  invoiceQuantity Int
  divergenceQuantity   Int?
  currentBalance   Int
  unitPrice        Decimal  
  status String?
  divergenceItem    Boolean  @default(false)
  assignedAt DateTime @default(now()) @map("assigned_at")


  invoice   Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  item      Items     @relation(fields: [itemId], references: [id])
  address   Address?  @relation(fields: [addressId], references: [id])
  stockType StockType?  @relation(fields: [stockTypeId], references: [id])
  updatedByUser    User       @relation(fields: [lastUpdatedBy], references: [id]) 
  company   Company  @relation(fields: [companyId], references: [id])

  @@unique([invoiceId, itemId])
  @@index([id])
  @@map("Stock") 
}

